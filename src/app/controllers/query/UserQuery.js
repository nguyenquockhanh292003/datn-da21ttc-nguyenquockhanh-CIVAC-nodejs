// const CryptoService = require('../../../Extesions/cryptoService');
const Acounts = require('../../model/Account');
const jwt = require('jsonwebtoken');
const messages = require('../../Extesions/messCost');

class UserQuery {
    
    /**
     * H√†m AddUser: X·ª≠ l√Ω trang th√™m ng∆∞·ªùi d√πng m·ªõi.
     * - Tr·∫£ v·ªÅ trang th√™m ng∆∞·ªùi d√πng v·ªõi nƒÉm hi·ªán t·∫°i v√† tr·∫°ng th√°i t·∫°o m·ªõi (n·∫øu c√≥).
     * @param {Object} req - Request t·ª´ client
     * @param {Object} res - Response tr·∫£ v·ªÅ cho client
     * @param {Function} next - H√†m ti·∫øp theo trong chu·ªói middleware
     */
    AddUser(req, res, next) {
        res.status(200).render('pages/addUser', { layout: 'main'});
    }

    /**
     * H√†m AddUser: X·ª≠ l√Ω trang th√™m ng∆∞·ªùi d√πng m·ªõi.
     * - Tr·∫£ v·ªÅ trang th√™m ng∆∞·ªùi d√πng v·ªõi nƒÉm hi·ªán t·∫°i v√† tr·∫°ng th√°i t·∫°o m·ªõi (n·∫øu c√≥).
     * @param {Object} req - Request t·ª´ client
     * @param {Object} res - Response tr·∫£ v·ªÅ cho client
     * @param {Function} next - H√†m ti·∫øp theo trong chu·ªói middleware
     */
    UpdateUser(req, res, next) {
        res.status(200).render('pages/updateUser', { layout: 'main'});
    }
    
    /**
     * H√†m ListAllUser: X·ª≠ l√Ω trang danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng.
     * - L·∫•y t·∫•t c·∫£ c√°c t√†i kho·∫£n ngo·∫°i tr·ª´ "system_admin".
     * - N·∫øu kh√¥ng c√≥ ng∆∞·ªùi d√πng, tr·∫£ v·ªÅ trang danh s√°ch ng∆∞·ªùi d√πng r·ªóng.
     * - M√£ h√≥a m·∫≠t kh·∫©u ng∆∞·ªùi d√πng tr∆∞·ªõc khi g·ª≠i d·ªØ li·ªáu.
     * @param {Object} req - Request t·ª´ client
     * @param {Object} res - Response tr·∫£ v·ªÅ cho client
     * @param {Function} next - H√†m ti·∫øp theo trong chu·ªói middleware
     */
    async ListAllUser(req, res, next) {
        try {
            const users = await Acounts.find({role: { $ne: 'system_admin' }})
                .select("-password");

            const totalUsers = await Acounts.countDocuments();

            const accountData = users.map(account => ({
                ...account.toObject(),
            }));

            console.log(users);
            res.status(200).render('pages/listAllUser', { 
                layout: 'main',
                accounts: accountData,
                totalUsers,
            });
        } catch (error) {
            console.error(messages.getAllUser.getAllUserError, error);
            res.status(500).send('Internal Server Error');  // Tr·∫£ v·ªÅ l·ªói server n·∫øu c√≥ l·ªói
        }
    }
    
    /**
     * üîπ L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (h·ªó tr·ª£ ph√¢n trang)
     * @param {Object} req - Request t·ª´ client.
     * @param {Object} res - Response tr·∫£ v·ªÅ JSON danh s√°ch ng∆∞·ªùi d√πng.
     */
    async getAllUsers(req, res) {
        try {
            const { page = 1, limit = 10 } = req.query; // H·ªó tr·ª£ ph√¢n trang

            // Chuy·ªÉn ƒë·ªïi sang s·ªë nguy√™n
            const pageNumber = parseInt(page, 10);
            const limitNumber = parseInt(limit, 10);

            const users = await Acounts.find({})
                .select("-password") // Lo·∫°i b·ªè tr∆∞·ªùng `password`
                .skip((pageNumber - 1) * limitNumber)
                .limit(limitNumber);

            const totalUsers = await Acounts.countDocuments();

            return res.status(200).json({
                success: true,
                totalUsers,
                page: pageNumber,
                limit: limitNumber,
                users
            });

        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", error);
            return res.status(500).json({ success: false, message: "L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng.", error: error.message });
        }
    }

    /**
     * üîπ L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ng∆∞·ªùi d√πng theo ID
     * @param {Object} req - Request t·ª´ client (ch·ª©a `id`).
     * @param {Object} res - Response tr·∫£ v·ªÅ JSON chi ti·∫øt ng∆∞·ªùi d√πng.
     */
    async getUserById(req, res) {
        let { id } = req.params;

        if(id === 'me') {
            
            id = req.user.id.toString();
        } 

        try {
            const user = await Acounts.findById(id).select("-password"); // Lo·∫°i b·ªè tr∆∞·ªùng `password`

            if (!user) {
                return res.status(404).json({ success: false, message: messages.getByIdUser.getByIdUserNotfound || "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
            }

            return res.status(200).json({ success: true, user });

        } catch (error) {
            console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
            return res.status(500).json({ success: false, message: "L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.", error: error.message });
        }
    }

    /**
     * H√†m Profile: X·ª≠ l√Ω trang h·ªì s∆° ng∆∞·ªùi d√πng.
     * - L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ token v√† tr·∫£ v·ªÅ trang h·ªì s∆°.
     * @param {Object} req - Request t·ª´ client
     * @param {Object} res - Response tr·∫£ v·ªÅ cho client
     * @param {Function} next - H√†m ti·∫øp theo trong chu·ªói middleware
     */
    ProfileUser(req, res, next) {
        res.status(200).render('pages/profile', { layout: 'main'});
    }
}

module.exports = new UserQuery;
