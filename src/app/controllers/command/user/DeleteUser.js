const messages = require('../../../Extesions/messCost');
const Acounts = require('../../../model/Account');
const fs = require('fs');
const path = require('path');

class DeleteUser {
    
    /**
     * V√¥ hi·ªáu h√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng b·∫±ng c√°ch ƒë·∫∑t thu·ªôc t√≠nh `isDeleted` th√†nh `true`.
     * N·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c c√≥ l·ªói x·∫£y ra, tr·∫£ v·ªÅ th√¥ng b√°o l·ªói.
     * 
     * @param {Object} req - Y√™u c·∫ßu ch·ª©a th√¥ng tin ID ng∆∞·ªùi d√πng.
     * @param {Object} res - Ph·∫£n h·ªìi ch·ª©a th√¥ng b√°o k·∫øt qu·∫£.
     */
    async disable(req, res) {
        const { id } = req.params;  

        try {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i isDeleted c·ªßa ng∆∞·ªùi d√πng th√†nh true
            const result = await Acounts.findByIdAndUpdate(id, { isDeleted: true }, { new: true });

            req.session.isSoftDelete = true; // ƒê√°nh d·∫•u tr·∫°ng th√°i ƒë√£ v√¥ hi·ªáu h√≥a
            if (!result) {
                req.session.isSoftDelete = false;
                return res.status(404).json({ success: false, message: messages.deleteUser.softDeleteError });
            }
            
            return res.status(200).json({ success: true, message: messages.deleteUser.softDeleteSuccess });
        } catch (error) {
            console.error(messages.deleteUser.softDeleteError, error);
            return res.status(500).json({ success: false, message: messages.deleteUser.softDeleteError });
        }
    }
    
    /**
     * üî• X√≥a vƒ©nh vi·ªÖn t√†i kho·∫£n ng∆∞·ªùi d√πng v√† x√≥a ·∫£nh ƒë·∫°i di·ªán (n·∫øu c√≥).
     * @param {Object} req - Y√™u c·∫ßu ch·ª©a ID ng∆∞·ªùi d√πng.
     * @param {Object} res - Ph·∫£n h·ªìi JSON k·∫øt qu·∫£.
     */
    async delete(req, res) {
        const { id } = req.params;

        try {
            // üîπ T√¨m v√† x√≥a ng∆∞·ªùi d√πng
            const user = await Acounts.findByIdAndDelete(id);
            if (!user) {
                return res.status(404).json({ success: false, message: messages.deleteUser.deleteError });
            }

            // üîπ Ki·ªÉm tra v√† x√≥a ·∫£nh ƒë·∫°i di·ªán (n·∫øu c√≥)
            if (user.profile && user.profile.avatar && typeof user.profile.avatar === "string" && user.profile.avatar.trim() !== "") {
                const avatarPath = path.join(__dirname, '../../../../../public', user.profile.avatar);

                try {
                    if (fs.existsSync(avatarPath)) {
                        await fs.promises.unlink(avatarPath); // X√≥a file b·∫•t ƒë·ªìng b·ªô
                        console.log("·∫¢nh ƒë·∫°i di·ªán ƒë√£ ƒë∆∞·ª£c x√≥a:", user.profile.avatar);
                    } 
                } catch (err) {
                    console.error("L·ªói khi x√≥a ·∫£nh ƒë·∫°i di·ªán:", err);
                }
            }

            return res.status(200).json({ success: true, message: messages.deleteUser.deleteSuccess });

        } catch (error) {
            console.error(messages.deleteUser.deleteError, error);
            return res.status(500).json({ success: false, message: "L·ªói khi x√≥a t√†i kho·∫£n.", error: error.message });
        }
    }
}

module.exports = new DeleteUser();
